package com.vicayala.responsible.infrastructure.db.entities.responsible;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.vicayala.responsible.domain.dtos.responsible.BranchResponsibleDTO;
import com.vicayala.responsible.domain.dtos.responsible.CompanyDTO;
import com.vicayala.responsible.domain.dtos.responsible.ContractEmployeeResponsibleDTO;
import com.vicayala.responsible.domain.dtos.responsible.InHouseEmployeeResponsibleDTO;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.beans.BeanUtils;

import java.math.BigDecimal;
import java.time.ZoneId;
import java.util.Date;
import java.util.Objects;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@DynamoDBTable(tableName = "help-center-responsible")
public class ResponsibleItemEntity {

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "id")
    private String id;
    @DynamoDBAttribute(attributeName = "responsibleType")
    private String responsibleType;
    @DynamoDBAttribute(attributeName = "fullName")
    private String fullName;
    @DynamoDBAttribute(attributeName = "personalEmail")
    private String personalEmail;
    @DynamoDBAttribute(attributeName = "documentType")
    private String documentType;
    @DynamoDBAttribute(attributeName = "documentNumber")
    private String documentNumber;
    @DynamoDBAttribute(attributeName = "company")
    private CompanyEntity company;
    @DynamoDBAttribute(attributeName = "name")
    private String name;
    @DynamoDBAttribute(attributeName = "city")
    private String city;
    @DynamoDBAttribute(attributeName = "address")
    private String address;
    @DynamoDBAttribute(attributeName = "serviceDescription")
    private String serviceDescription;
    @DynamoDBAttribute(attributeName = "endedDateService")
    private Date endedDateService;
    @DynamoDBAttribute(attributeName = "serviceTotalPayment")
    private BigDecimal serviceTotalPayment;
    @DynamoDBAttribute(attributeName = "currency")
    private String currency;
    @DynamoDBAttribute(attributeName = "contractType")
    private String contractType;
    @DynamoDBAttribute(attributeName = "position")
    private String position;
    @DynamoDBAttribute(attributeName = "corporateEmail")
    private String corporateEmail;
    @DynamoDBAttribute(attributeName = "salary")
    private BigDecimal salary;


    public static BranchResponsibleDTO toBranchDto(ResponsibleItemEntity responsibleItemEntity){
        BranchResponsibleDTO branchResponsibleDTO = new BranchResponsibleDTO();
        BeanUtils.copyProperties(responsibleItemEntity, branchResponsibleDTO);
        return branchResponsibleDTO;
    }

    public static InHouseEmployeeResponsibleDTO toInHouseDto(ResponsibleItemEntity responsibleItemEntity){
        InHouseEmployeeResponsibleDTO inHouseEmployeeResponsibleDTO = new InHouseEmployeeResponsibleDTO();
        BeanUtils.copyProperties(responsibleItemEntity, inHouseEmployeeResponsibleDTO);
        inHouseEmployeeResponsibleDTO.setCompany(convertToCompanyDto(responsibleItemEntity.getCompany()));
        return inHouseEmployeeResponsibleDTO;
    }

    public static ContractEmployeeResponsibleDTO toContractorDto(ResponsibleItemEntity responsibleItemEntity){
        ContractEmployeeResponsibleDTO contractEmployeeResponsibleDTO = new ContractEmployeeResponsibleDTO();
        BeanUtils.copyProperties(responsibleItemEntity, contractEmployeeResponsibleDTO);
        contractEmployeeResponsibleDTO.setCompany(convertToCompanyDto(responsibleItemEntity.getCompany()));
        contractEmployeeResponsibleDTO.setEndedDateService(Objects.nonNull(responsibleItemEntity
                .getEndedDateService()) ? responsibleItemEntity
                .getEndedDateService().toInstant().atZone(ZoneId.systemDefault()).toLocalDate() : null);
        return contractEmployeeResponsibleDTO;
    }

    private static CompanyDTO convertToCompanyDto (CompanyEntity companyEntity){
        if(Objects.isNull(companyEntity)){
            return null;
        }
        CompanyDTO companyDTO = new CompanyDTO();
        BeanUtils.copyProperties(companyEntity, companyDTO);
        return companyDTO;
    }
}
